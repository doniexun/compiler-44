/*
 * Will Korteland
 * 21st August 2014
 * Parsing module for compiler
 */

#ifndef _LEXER_H_
#define _LEXER_H_

#include <math.h>
#include <sys/stat.h>
#include <stdio.h>
#include <string.h>

typedef struct _sourcePos {
    int line;
    int linePos;
} SourcePos;

typedef struct _spelling {
    char *spelling;
} Spelling;

typedef struct _token {
    int kind;
    Spelling spelling;
    SourcePos pos;
} Token;

enum tokens {
    LBRACKET,
    RBRACKET,
    LPAREN,
    RPAREN,
    LCURLY,
    RCURLY,
    DOT,
    S_DEREF,
    INCREMENT,
    DECREMENT,
    BIT_AND,
    STAR,
    PLUS,
    MINUS,
    TILDE,
    NOT,
    DIV,
    MOD,
    LSHIFT,
    RSHIFT,
    LT,
    GT,
    LTE,
    GTE,
    EQEQ,
    NEQ,
    XOR,
    BIT_OR,
    LOG_AND,
    LOG_OR,
    QMARK,
    COLON,
    SEMICOLON,
    ELLIPSE,
    EQ,
    MULT_EQ,
    DIV_EQ,
    MOD_EQ,
    PLUS_EQ,
    MINUS_EQ,
    LSHIFT_EQ,
    RSHIFT_EQ,
    AND_EQ,
    XOR_EQ,
    OR_EQ,
    COMMA,
    HASH,
    CONCAT,
    AUTO,
    BREAK,
    CASE,
    CHAR,
    CONST,
    CONTINUE,
    DEFAULT,
    DO,
    DOUBLE,
    ELSE,
    ENUM,
    EXTERN,
    FLOAT,
    FOR,
    GOTO,
    IF,
    INLINE,
    INT,
    LONG,
    REGISTER,
    RESTRICT,
    RETURN,
    SHORT,
    SIGNED,
    SIZEOF,
    STATIC,
    STRUCT,
    SWITCH,
    TYPEDEF,
    UNION,
    UNSIGNED,
    VOID,
    VOLATILE,
    WHILE,
    _ALIGNAS,
    _ALIGNOF,
    _ATOMIC,
    _BOOL,
    _COMPLEX,
    _GENERIC,
    _IMAGINARY,
    _NORETURN,
    _STATIC_ASSERT,
    _THREAD_LOCAL,
    IDENTIFIER,
    INTEGER,
    OCT_INT,
    HEX_INT,
    HEX_FLOAT,
    STRING_LITERAL,
    ESCAPE,
    ERROR,
    END
};

static char* operators[] = {
    "[",
    "]",
    "(",
    ")",
    "{",
    "}",
    ".",
    "->",
    "++",
    "--",
    "&",
    "*",
    "+",
    "-",
    "~",
    "!",
    "/",
    "%",
    "<<",
    ">>",
    "<",
    ">",
    "<=",
    ">=",
    "==",
    "!=",
    "^",
    "|",
    "&&",
    "||",
    "?",
    ":",
    ";",
    "...",
    "=",
    "*=",
    "/=",
    "%=",
    "+=",
    "-=",
    "<<=",
    ">>=",
    "&=",
    "^=",
    "|=",
    ",",
    "#",
    "##",
    "AUTO",
    "BREAK",
    "CASE",
    "CHAR",
    "CONST",
    "CONTINUE",
    "DEFAULT",
    "DO",
    "DOUBLE",
    "ELSE",
    "ENUM",
    "EXTERN",
    "FLOAT",
    "FOR",
    "GOTO",
    "IF",
    "INLINE",
    "INT",
    "LONG",
    "REGISTER",
    "RESTRICT",
    "RETURN",
    "SHORT",
    "SIGNED",
    "SIZEOF",
    "STATIC",
    "STRUCT",
    "SWITCH",
    "TYPEDEF",
    "UNION",
    "UNSIGNED",
    "VOID",
    "VOLATILE",
    "WHILE",
    "_ALIGNAS",
    "_ALIGNOF",
    "_ATOMIC",
    "_BOOL",
    "_COMPLEX",
    "_GENERIC",
    "_IMAGINARY",
    "_NORETURN",
    "_STATIC_ASSERT",
    "_THREAD_LOCAL",
    "IDENTIFIER",
    "INTEGER",
    "OCT_INT",
    "HEX_INT",
    "HEX_FLOAT",
    "STRING_LITERAL",
    "ESCAPE",
    "@",
    "$"
};

int lexerInit(const char *fname);

Token nextToken(void);

#endif // _LEXER_H_
